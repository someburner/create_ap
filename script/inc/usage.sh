#!/bin/bash

usage() {
   echo "Usage: "$PROGNAME" [options] <wifi-interface> [<interface-with-internet>] [<access-point-name> [<passphrase>]]"
   echo
   echo "Options:"
   echo "  -h, --help                Show this help"
   echo "  --version                 Print version number"
   echo "  -c <channel>              Channel number (default: 1)"
   echo "  -w <WPA version>          Use 1 for WPA, use 2 for WPA2, use 1+2 for both (default: 1+2)"
   echo "  -n         Disable Internet sharing (if you use this, don't pass"
   echo "         the <interface-with-internet> argument)"
   echo "  -m <method>               Method for Internet sharing."
   echo "         Use: 'nat' for NAT (default)"
   echo "          'bridge' for bridging"
   echo "          'none' for no Internet sharing (equivalent to -n)"
   echo "  --psk                     Use 64 hex digits pre-shared-key instead of passphrase"
   echo "  --hidden                  Make the Access Point hidden (do not broadcast the SSID)"
   echo "  --mac-filter              Enable MAC address filtering"
   echo "  --mac-filter-accept       Location of MAC address filter list (defaults to /etc/hostapd/hostapd.accept)"
   echo "  --redirect-to-localhost   If -n is set, redirect every web request to localhost (useful for public information networks)"
   echo "  --hostapd-debug <level>   With level between 1 and 2, passes arguments -d or -dd to hostapd for debugging."
   echo "  --isolate-clients         Disable communication between clients"
   echo "  --ieee80211n              Enable IEEE 802.11n (HT)"
   echo "  --ieee80211ac             Enable IEEE 802.11ac (VHT)"
   echo "  --ht_capab <HT>           HT capabilities (default: [HT40+])"
   echo "  --vht_capab <VHT>         VHT capabilities"
   echo "  --country <code>          Set two-letter country code for regularity (example: US)"
   echo "  --freq-band <GHz>         Set frequency band. Valid inputs: 2.4, 5 (default: 2.4)"
   echo "  --driver                  Choose your WiFi adapter driver (default: nl80211)"
   echo "  --no-virt                 Do not create virtual interface"
   echo "  --no-haveged              Do not run 'haveged' automatically when needed"
   echo "  --fix-unmanaged           If NetworkManager shows your interface as unmanaged after you"
   echo "         close create_ap, then use this option to switch your interface"
   echo "         back to managed"
   echo "  --mac <MAC>               Set MAC address"
   echo "  --dhcp-dns <IP1[,IP2]>    Set DNS returned by DHCP"
   echo "  --daemon                  Run create_ap in the background"
   echo "  --stop <id>               Send stop command to an already running create_ap. For an <id>"
   echo "         you can put the PID of create_ap or the WiFi interface. You can"
   echo "         get them with --list-running"
   echo "  --list-running            Show the create_ap processes that are already running"
   echo "  --list-clients <id>       List the clients connected to create_ap instance associated with <id>."
   echo "         For an <id> you can put the PID of create_ap or the WiFi interface."
   echo "         If virtual WiFi interface was created, then use that one."
   echo "         You can get them with --list-running"
   echo "  --mkconfig <conf_file>     Store configs in conf_file"
   echo "  --config <conf_file>       Load configs from conf_file"
   echo
   echo "Non-Bridging Options:"
   echo "  --no-dns             Disable dnsmasq DNS server"
   echo "  --no-dnsmasq         Disable dnsmasq server completely"
   echo "  -g <gateway>         IPv4 Gateway for the Access Point (default: 192.168.12.1)"
   echo "  -d                   DNS server will take into account /etc/hosts"
   echo "  -e <hosts_file>      DNS server will take into account additional hosts file"
   echo
   echo "Useful informations:"
   echo "  * If you're not using the --no-virt option, then you can create an AP with the same"
   echo "   interface you are getting your Internet connection."
   echo "  * You can pass your SSID and password through pipe or through arguments (see examples)."
   echo "  * On bridge method if the <interface-with-internet> is not a bridge interface, then"
   echo "   a bridge interface is created automatically."
   echo
   echo "Examples:"
   echo "  "$PROGNAME" wlan0 eth0 MyAccessPoint MyPassPhrase"
   echo "  echo -e 'MyAccessPoint\nMyPassPhrase' | "$PROGNAME" wlan0 eth0"
   echo "  "$PROGNAME" wlan0 eth0 MyAccessPoint"
   echo "  echo 'MyAccessPoint' | "$PROGNAME" wlan0 eth0"
   echo "  "$PROGNAME" wlan0 wlan0 MyAccessPoint MyPassPhrase"
   echo "  "$PROGNAME" -n wlan0 MyAccessPoint MyPassPhrase"
   echo "  "$PROGNAME" -m bridge wlan0 eth0 MyAccessPoint MyPassPhrase"
   echo "  "$PROGNAME" -m bridge wlan0 br0 MyAccessPoint MyPassPhrase"
   echo "  "$PROGNAME" --driver rtl871xdrv wlan0 eth0 MyAccessPoint MyPassPhrase"
   echo "  "$PROGNAME" --daemon wlan0 eth0 MyAccessPoint MyPassPhrase"
   echo "  "$PROGNAME" --stop wlan0"
}
